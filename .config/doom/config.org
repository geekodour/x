#+TITLE: geekodour's fucktacular emacs config
#+AUTHOR: Hrishikesh Barman
#+PROPERTY: header-args :tangle config.el

This config is the definition of anti-pragmatism and idiocrasy.

* Useful links
** emacs
- [[https://docs.doomemacs.org/latest/][Doom Emacs v21.12 documentation]]
- [[https://emacsdocs.org/][Hello from Emacs Docs | Emacs Docs]]
** org-mode
- [[https://www.youtube.com/watch?v=0g9BcZvQbXU][Consistent Technical Documents Using Emacs and Org Mode - YouTube]]
- [[https://github.com/james-stoup/emacs-org-mode-tutorial][james-stoup/emacs-org-mode-tutorial]]
- [[https://orgmode.org/worg/org-hacks.html][Org ad hoc code, quick hacks and workarounds]]
- [[https://orgmode.org/worg/doc.html][Documentation for Org hooks, commands and options]]
- [[https://olmon.gitlab.io/org-themes/][Org Themes collection]]
** Others
- [[https://github.com/noctuid/evil-guide#does-emacs-have-vim-like-tabs-distinct-window-configurations=][noctuid/evil-guide: Draft of a guide for using emacs with evil]]
- [[https://github.com/chrisdone/elisp-guide][elisp-guide: A quick guide to Emacs Lisp programming]]
* Fix now
- [ ] Create workspaces for locus, for config etc.
- [ ] Learn how to properly set keybindings (It's a mess rn)
- [ ] Learn hooks
- [ ] Learn sessions
- [ ] Learn emacs code review
- [ ] Learn macros
- [ ] oxhugo export/all function is slow. Make it git aware so it only picks org files that are git dirty. Maybe an option.
- [ ] Enable treesitter for all languages
- [X] Disable =potery-tracking-mode=
- [ ] Fix emacs session save and restore. Autosave is werid.
- [ ] [[https://www.reddit.com/r/DoomEmacs/comments/mfr0ed/how_can_i_disable_format_onsave_on_specific/][Prettier Fix ]]
- [ ] I want to be able to select a bunch of text and slap a link on it. Currently I do manual =]][[]<paste>][]<forward>][<backward>[]]= kind of shit which kills me a little inside.
- [ ] Learn 3 way merging, [[https://www.gnu.org/software/emacs/manual/html_node/ediff/Merging-and-diff3.html][Merging and diff3 (Ediff User’s Manual)]]
* Fix later
- [ ] Currently the config file is based on emacs semantics, eg. local vars, hooks etc. This way of configuring seems to be a bad choice in hindsight but I do not have the time to reshuffle things atm plus some things are mixed. Come back and fix this shit when you're free.
- [ ] Play with org-ql to get more things out of org-mode. I honestly have no need to do so.

* Look and feel
** Fonts and Theme
#+begin_src elisp
(setq
 doom-font (font-spec :family "JetBrains Mono Nerd Font" :size 13)
 ;; doom-font (font-spec :family "FiraCode Nerd Font Mono" :size 13)
 doom-theme 'doom-tokyo-night
 doom-themes-treemacs-theme "doom-colors"
 )
#+end_src
** Line numbers and other mini mods
#+begin_src elisp
(setq
 display-line-numbers-type 'relative
 magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")
 )
#+end_src
** Splash screen
#+begin_src elisp
(setq
 fancy-splash-image (concat doom-user-dir "splash/mario.png")
 +doom-dashboard-functions '(doom-dashboard-widget-banner doom-dashboard-widget-loaded)
 )
#+end_src

* Setting variables
- If a variable is not =buffer-local=, then =setq= and =setq-default= do the same thing.
- If a variable is =buffer-local=
  - =setq= sets its local value in the current buffer
  - =setq-default= sets the global default value
** Local variables
*** User info
#+begin_src elisp
(setq
 user-full-name "Hrishikesh Barman"
 user-mail-address "hrishikeshbman@gmail.com"
 )
#+end_src
*** org-mode and org-roam
#+begin_src elisp
(setq
 org-directory "~/notes/org/"
 org-roam-directory "~/notes/org/roam" ; expects the directory to exist
 org-agenda-files '("~/notes/org/tasks.org" "~/notes/org/l.org" "~/locus/o/content-org/anti_lib.org") ; it looks for files with .org extensions
 org-roam-mode-sections '(org-roam-backlinks-section org-roam-reflinks-section) ;; TODO: Maybe we don't need this
 ;; journal
 org-journal-date-prefix "#+title: "
 org-journal-time-prefix "* "
 org-journal-file-header 'cf/org-journal-date-prefix
 org-journal-date-format "%a, %d-%m-%y"
 org-journal-file-format "%d_%m_%Y.org" ; important to have the .org otherwise org-agenda does not pick the todos
 )
#+end_src
*** deft
#+begin_src elisp
(setq
 deft-directory "~/notes/org"
 deft-recursive t
 deft-recursive-ignore-dir-regexp "\\(?:\\.\\|\\.\\.\\|roam\\|journal\\)"
 deft-use-filename-as-title t
 deft-strip-summary-regexp "\\(.*\\)"
 )
#+end_src
*** Misc
#+begin_src elisp
(setq
 poetry-tracking-strategy 'projectile
 )
#+end_src
** Default variables
#+begin_src elisp
(setq-default
 ;;x-stretch-cursor t ; stretch cursor to the glyph width
 evil-want-fine-undo t  ; by default while in insert all changes are one big blob. Be more granular
 auto-save-default nil ; auto save creates a lot of issues for me.
 truncate-string-ellipsis "…"  ; unicode ellispis are nicer than "..."
 shell-file-name "/bin/bash" ; org-anki has issues with fish shell because of no heredoc support, for now I don't really need fish
 )
#+end_src
** Environment variables
#+begin_src elisp
(setenv "XDG_SESSION_TYPE" "wayland") ;; for some reason emacs does not pick this up so we set it up manually
#+end_src
* Package configurations
See: [[https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#configuring-doom][doomemacs/getting_started.org]]
** Package initializations
These use ~use-package!~. It declares and configures a package.
*** tree-sitter
- If ever face issues w =tsx= check [[https://vxlabs.com/2022/06/12/typescript-development-with-emacs-tree-sitter-and-lsp-in-2022/][this]]
#+begin_src elisp
(use-package! tree-sitter
  :config
  (global-tree-sitter-mode)
  (require 'tree-sitter-langs)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src
*** code formatting
- [[https://github.com/doomemacs/doomemacs/pull/6369][doomemacs/doomemacs#6369 refactor(format): replace with apheleia by elken]]
- if formatter is not found it will just quit quietly
#+begin_src elisp
(use-package! apheleia
  :config
  (apheleia-global-mode +1)
  (setf (alist-get 'python-mode apheleia-mode-alist)
        '(isort black)))
(push '(sh-mode . shfmt) apheleia-mode-alist) ; apheleia for some reason does not already do this
#+end_src

*** code checking and grammar
- I am not using =flycheck=, instead going plain =flaymake= + =eglot= and other =flymake= backends as needed. Nice combo. =SPC-c-x=
- https://github.com/mohkale/flymake-collection#configurations
#+begin_src elisp
(add-hook! prog-mode #'flymake-mode) ; start flymake-mode by default only for programming language
(setq
 eglot-stay-out-of nil
 )
(map!
 (:leader :desc "Enable vale" "t V" #'flymake-vale-maybe-load)) ; no way to toggle apparently
#+end_src
*** spell checking
- For spellchecking, emacs has =ispell= (interactive spelling) and =flyspell= (spelling on the fly).
- I wanted to use =enchant-2= as the middle man but =enchant-2= [[https://bugs.archlinux.org/task/68499][warns about]] optional deps.
- So it's just =hunspell= for me.
*** Misc packages inits
#+begin_src elisp
(use-package! nyan-mode
  :config
  (nyan-mode))

(use-package! flymake-popon
  :config
  (global-flymake-popon-mode))

(use-package! org-appear
  :after org
  :hook (org-mode . org-appear-mode)
  :config (setq
           org-appear-autolinks t
           org-appear-autoentities t
           org-appear-autosubmarkers t
           ))

;; TODO: This needs to be configured properly
(use-package! org-transclusion
  :after org-roam
  )

(use-package! websocket
    :after org-roam) ;; Needed for org-roam-ui
(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

(use-package! org-super-agenda
  :hook (org-agenda-mode . org-super-agenda-mode)
)
#+end_src
** Package tweaking
These use ~after!~. It evaluates body after package has loaded.
*** LSP
I am using [[https://github.com/joaotavora/eglot][eglot]] instead of =lsp-mode=, it has less bells and whistles but it's more emacs native.
- =clangd= : c like languages
  - [[https://github.com/clangd/clangd/issues/45][clangd/clangd#45 Support non-self-contained files]]
- =pyright= : python
**** eldoc issues
- eldoc showing escape sequences (noticed in python, pyright lsp atleast)
  - =pyright= team only guarantee to target the markdown renderer supported by the VSCode LSP client. =eglot-prefer-plaintext= should help w pyright as of the moment. This will show everything in plain text, but that's fine for me.
  - =pyright= will not always show docstrings if they're not in the stub. See [[https://github.com/microsoft/pyright/issues/3632][this]] for more info.
  - But the extra =__= are [[https://github.com/jrblevin/markdown-mode/issues/661][still an issue]] w =clangd=
- eglot messes w yasnippet. fix added as suggested [[https://stackoverflow.com/questions/72601990/how-to-show-suggestions-for-yasnippets-when-using-eglot][here]]. works fine!
#+begin_src elisp
(setq eglot-prefer-plaintext t)
(setq-default eglot-workspace-configuration '((:gopls . ((gofumpt . t)))))

(add-hook 'eglot-managed-mode-hook (lambda ()(add-to-list 'company-backends '(company-capf :with company-yasnippet))))
#+end_src
****
**** lsptreemacs
There's something very neat about symbol trees. I like them but unfortunately I can't have them. Why you may ask.
- [[https://github.com/joaotavora/eglot/issues/614][Support for call hierarchies · Issue #614 · joaotavora/eglot · GitHub]]
- [[https://github.com/emacs-lsp/lsp-treemacs][GitHub - emacs-lsp/lsp-treemacs: lsp-mode treemacs]] (lsp-mode only)
**** dap-mode
=dap-mode= currently not supported for =eglot=, See [[https://www.reddit.com/r/emacs/comments/y2s13n/eglot_as_lsp_interface_dap/][this]] and [[https://github.com/emacs-lsp/dap-mode/issues/2][this]].
*** org-mode
**** General
#+begin_src elisp
(after! org
  (setq
   org-tags-column 0
   org-element-use-cache nil ; emacs doesn't let me save files or exit emacs otherwise, emacs bug. follow up.
   org-auto-align-tags t
   org-hide-emphasis-markers t
   org-fold-catch-invisible-edits 'show-and-error
   org-insert-heading-respect-content t
   org-pretty-entities t
   org-ellipsis "…"
   org-image-actual-width 300
   org-complete-tags-always-offer-all-agenda-tags t
   ))
#+end_src
**** Look and feel
#+begin_src elisp
(after! org
  (custom-set-faces!
    '(org-level-1 :height 1.2 :weight extrabold :slant normal)
    '(org-level-2 :height 1.1 :weight bold :slant normal)
    '(org-level-3 :height 1.0 :weight bold :slant normal)
    '(org-document-title :height 180 :weight medium :family "Roboto")
    ))
#+end_src
**** org-todo
#+begin_src elisp
(after! org
  (setq
   org-todo-keywords
   '(
     ;;tasks
     (sequence "TODO(t)" "INPROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")
     ;;media
     (sequence "TOCONSUME" "CONSUMING" "|" "FINISHED" "DROPPED")
     ;;items
     (sequence "TOACQUIRE" "|" "ACQUIRED")
     ;;projects
     (sequence "SEED" "SAPLING" "GROWING" "|" "GROWN" "DIED")
     )
   ))
#+end_src
*** org-capture templates
#+begin_src elisp
(after! org
  (setq org-capture-templates `(
#+end_src
**** Tasks
#+begin_src elisp
;; tasks
;; tt: general todos
;; ts: appointments/events/meetings
;; td: self reminders
;; tw: blocked reminders
("t", "tasks")
("tt" "add todo" entry (file ,(concat org-directory "tasks.org")) "* TODO %?" :empty-lines 1)
("ts" "add todo[scheduled]" entry (file ,(concat org-directory "tasks.org")) "* TODO %? \nSCHEDULED: %^T" :empty-lines 1)
("td" "add todo[deadline]" entry (file ,(concat org-directory "tasks.org")) "* TODO %? \nDEADLINE: %^T" :empty-lines 1)
("tw" "add wait[deadline]" entry (file ,(concat org-directory "tasks.org")) "* WAITING %? \nDEADLINE: %^T" :empty-lines 1)
#+end_src
**** Lists
#+begin_src elisp
;; post/watch/read lists
;; lp: post list; online readings, tweets, blogs etc.
;; lm: movie list; movie, youtube videos, documentaries etc.
;; lv: video list; youtube videos, other short videos etc.
;; lr: reading list; book/paper readings etc.
("l", "lists")
("lp" "add post" entry (file+olp "~/locus/o/content-org/anti_lib.org" "Posts" "Un-categorized") "*** TOCONSUME %?" :empty-lines 1)
("lm" "add movie" entry (file+olp "~/locus/o/content-org/anti_lib.org" "Movies" "Un-categorized") "*** TOCONSUME %?" :empty-lines 1)
("lv" "add video" entry (file+olp "~/locus/o/content-org/anti_lib.org" "Videos" "Un-categorized") "*** TOCONSUME %?" :empty-lines 1)
("lr" "add book" entry (file+olp "~/locus/o/content-org/anti_lib.org" "Books" "Un-categorized") "*** TOCONSUME %?" :empty-lines 1)
#+end_src
**** til
#+begin_src elisp
;; today i x
;; inspiration: https://simonwillison.net/2021/May/2/one-year-of-tils/
;; xl: today i learned
;; xf: today i fucked up
;; TODO: Remove these, TILs and TIFUs to be fetched from Github issues, idk i kinda like the emacs interface now
("x", "todayi")
("xl" "add til" entry (file ,"~/locus/todayi/content-org/til.org") (function org-hugo-new-subtree-post-capture-template))
("xf" "add tifu" entry (file ,"~/locus/todayi/content-org/tifu.org") (function org-hugo-new-subtree-post-capture-template))
#+end_src
**** Ideas
NOTE: We're using =,= to escape =*= , the =,= will go away when tangled.
#+begin_src elisp
;; idea
;; il: new idea, can be anything
;; ip: some project idea
("i", "ideas")
("il" "add idea" entry (file ,(concat org-directory "ideas/ideas.org")) "* %?" :empty-lines 1)
("ip" "add project idea" entry (file "~/locus/o/assets/pages/project_ideas.org")
"* SEED %? %^g" :empty-lines 1)
#+end_src
**** Journal
#+begin_src elisp
;; journal
;; jj: journal entry, custom journal entry template attempts to emulate org-journal insertion.
;; jm: morning journal entry
;; jn: night journal entry
;; jh: health journal entry
("j" "journal")
("jj" "add journal entry" entry (function cf/org-journal-find-location) "* %<%H:%M> %?\n%i")
("jm" "add morning journal entry" entry (function cf/org-journal-find-location)
"* %<%H:%M> Morning Entry
,** Looking Forward To \n%?" :empty-lines 1 :prepend t)
("jn" "add night journal entry" entry (function cf/org-journal-find-location)
"* %<%H:%M> Night Entry
,** What do I remember from today?\n%?" :empty-lines 1)
("jh" "add health journal entry" entry (file ,(concat org-directory "health.org")) "* %T %?" :empty-lines 1))))
#+end_src
*** org-agenda settings
**** General org-agenda config
#+begin_src elisp
(after! org
  (setq
   org-agenda-current-time-string "⭠ now ─────────────────────────────────────────────────"
   org-agenda-skip-scheduled-if-done t
   org-agenda-skip-deadline-if-done t
   org-agenda-block-separator "────────────────"
   ))
#+end_src
**** org-agenda custom commands
#+begin_src elisp
(after! org
  (setq
   org-agenda-custom-commands
   '(("t" "only today 🌞"
      (
       ;; today
       (agenda "" (
                   (org-agenda-overriding-header "\n👊 Today's Agenda")
                   (org-agenda-span 'day)
                   (org-agenda-start-day nil)
                   (org-agenda-skip-scheduled-if-done nil)
                   (org-agenda-skip-deadline-if-done nil)
                   (org-agenda-include-deadlines t)
                   (org-super-agenda-groups '(
                                              (:name "" :time-grid t :order 1)
                                              (:discard (:anything))
                                              ))
                   ))
       ) nil ("~/daily.html" "daily.txt")
      )
     ("d" "daily agenda 🏃"
      (
       ;; unscheduled shit
       (tags-todo "*" ( ; required filtering only happens to work with tags-todo currently
                       (org-agenda-overriding-header "🌀 Unscheduled(High Priority)")
                       (org-super-agenda-groups '(
                                                  (:name "tasks ⚒" :and (:scheduled nil :deadline nil :todo "TODO" :priority "A") :order 1)
                                                  (:name "waits ⏰" :and (:scheduled nil :deadline nil :todo "WAITING" :priority "A") :order 1)
                                                  (:name "consuption 🔖" :and (:scheduled nil :deadline nil :todo "TOCONSUME" :priority "A") :order 2)
                                                  (:name "consuming 🐄" :and (:scheduled nil :deadline nil :todo "CONSUMING" :priority "A") :order 2)
                                                  (:discard (:anything))
                                                  ))
                       ))
       ;; today
       (agenda "" (
                   (org-agenda-overriding-header "\n👊 Today's Agenda")
                   (org-agenda-span 'day)
                   (org-agenda-start-day nil)
                   (org-agenda-skip-scheduled-if-done nil)
                   (org-agenda-skip-deadline-if-done nil)
                   (org-agenda-include-deadlines t)
                   (org-super-agenda-groups '(
                                              (:name "" :time-grid t :order 1)
                                              (:discard (:anything))
                                              ))
                   ))
       ;; next 3 days
       (agenda "" (
                   (org-agenda-overriding-header "\n📅 Next three days")
                   (org-agenda-time-grid nil)
                   (org-agenda-show-all-dates nil)
                   (org-agenda-span 3)
                   (org-agenda-start-day "+1d")
                   ))
       ;; deadlines for next 14 days
       (agenda "" ((org-agenda-overriding-header "\n🗡 Upcoming deadlines (+14d)")
                   (org-agenda-time-grid nil)
                   (org-agenda-start-on-weekday nil)
                   (org-agenda-start-day "+4d") ;; already have a next 3 days section
                   (org-agenda-span 14)
                   (org-agenda-show-all-dates nil)
                   (org-deadline-warning-days 0)
                   (org-agenda-entry-types '(:deadline))
                   ))
       ;; dues
       (alltodo "" (
                    (org-agenda-overriding-header "\n🔥 Overdue")
                    (org-super-agenda-groups '(
                                               (:name "deadlines 💀" :deadline past)
                                               (:name "schedules ♻" :scheduled past)
                                               (:discard (:anything))
                                               ))
                    ))
       ))
     )
   ))
#+end_src

*** org-download
#+begin_quote
DO NOT USE THIS WITH =org-roam= or anything using =ox-hugo= in general. Use =file:imagepath= instead.
#+end_quote
- This has been pretty much very low ROI package for me. I almost never use =org-download=, might aswell nuke it.
- This has been intentionally defined 2-3 times around the file because of how doom handles org-download. a better way would be to remove =+dragndrop= and install =org-download= separately
#+begin_src elisp
(after! org
  (setq
   org-download-image-dir "~/Pictures/org"
   ))
(after! org-download
  (setq-default
   org-download-image-dir "~/Pictures/org" ; buf local: -*- mode: Org; org-download-image-dir: "~/pictures/foo"; -*-
   )
  (setq
   org-download-method 'directory
   org-download-image-dir "~/Pictures/org" ; buf local: -*- mode: Org; org-download-image-dir: "~/pictures/foo"; -*-
   org-download-heading-lvl nil ; do not want this categorized by headings
   org-download-timestamp "%Y%m%d-%H%M%S_"
   )
  )
#+end_src

*** org-babel
This mostly works out of the box but apparently the extensions are somewhat fucked when we try to tangle. So explicitly specifying the extensions.
#+begin_src elisp
(after! org
  (add-to-list 'org-babel-tangle-lang-exts '("python" . "py"))
  (add-to-list 'org-babel-tangle-lang-exts '("rust" . "rs"))
  (add-to-list 'org-babel-tangle-lang-exts '("ocaml" . "ml"))
  (add-to-list 'org-babel-tangle-lang-exts '("go" . "go")))
#+end_src
*** ox-reveal (disabled)
This is downloaded but I don't make slides daily so I can enable this when I need it. Doesn't slow down things too much but why free load.
#+begin_src elisp :tangle no
(eval-after-load 'org-mode
  '(load-library "ox-reveal"))
#+end_src
*** projectile
These things are supposed to be emphemeral, not something you want to check in vcs. So work with these w that mindset.
- =session=
  - Set of open =workspaces=
  - =~/.emacs.d/.local/etc/workspaces/autosave= (where auto sessions are stored)
  - Keybindings: =SPC-q-*=
  - Will saving a session also save a workspace even if the workspace is not saved?
- =workspace=
  - Set of =projects=
  - emacs add support for =workspaces= via [[https://github.com/Bad-ptr/persp-mode.el][persp-mode]]. So =workspace= same as =perspective=
  - Keybindings: =SPC-TAB-*=
  - [[https://docs.doomemacs.org/v21.12/modules/ui/workspaces/][:ui workspaces - Doom Emacs v21.12 documentation]]
- =project=
  - Set of files, either signified via =vcs= repo or by including =.projectile= file.
  - emacs add support for project wide operations via [[https://github.com/bbatsov/projectile][projectile]]
- Treemacs
  - A sidebar
  - Shows =workspaces/prespective= and =projects=
  - You can add non-projectile projects to treemacs too. (=C-c C-p a= vs =C-c C-p p=)
  - =~/.emacs.d/.local/etc/workspaces/_workspaces=
    - When you save workspaces, this is where it gets saved.
    - Technically since this is a set of workspaces, which means it is a =session=. =SPC-q-*= allows you to load this, which basically loads all your saved workspaces.
    - This just saves the =workspace/prespective= name, the mapping is stored in =treemacs-persist=
    - While saving, w =SPC-TAB-s= you might encounter a prompt whether to overwrite existing saved workspaces or add it along.
  - =~/.emacs.d/.local/cache/treemacs-persist=
    - The cache for =project= - =workspace= mapping
    - It's what we get when you do =treemacs-edit-workspaces=
#+begin_src elisp
(after! projectile
  (setq
   projectile-project-search-path '("~/projects" "~/locus" "~/infra" "~/faafo")
   +workspaces-on-switch-project-behavior nil)

  (projectile-add-known-project "~/.config/") ; not a git repo but has a .projectile
  (projectile-add-known-project "~/notes/"))
#+end_src
*** tabs (disabled)
I no longer use tabs, long live buffers.
#+begin_src elisp :tangle no
(after! centaur-tabs
  (setq centaur-tabs-set-bar 'under) ; see https://github.com/ema2159/centaur-tabs/issues/127
  (centaur-tabs-group-by-projectile-project)) ; see https://github.com/ema2159/centaur-tabs/issues/181
#+end_src
*** Misc packages tweaks
#+begin_src elisp
(after! which-key
  (setq which-key-popup-type 'minibuffer)) ;; default popup does not show full contents sometimes

(after! org-fancy-priorities
  (setq org-fancy-priorities-list '("🌕" "🌗" "🌙" "☕")))

(after! chatgpt-shell
  (setq chatgpt-shell-openai-key "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"))
#+end_src
* Mode hooks
** Python quirks
#+begin_src elisp
(add-hook 'python-mode-hook
          (lambda ()
            (setq-local python-shell-buffer-name
                        (format "Python %s" (buffer-file-name))
                        )))
#+end_src
*** Restart python v1 (disabled)
Source: [[https://lgmoneda.github.io/2017/02/19/emacs-python-shell-config-eng.html][A solution for the reload modules problem in Emacs Python Shell | lgmoneda]]
#+begin_src elisp :tangle no
;; Restart python console before evaluate buffer or region to avoid various
;; uncanny conflicts, like not reloding modules even when they are changed"
(defun restart-python-console ()
  (interactive)
  (kill-Python "process")
  (sleep-for 0.05)
  (kill-buffer "*Python*")
  (elpy-shell-send-region-or-buffer))
#+end_src
*** Restart python v2 (disabled)
#+begin_src elisp :tangle no
;; Restart python console before evaluate buffer or region to avoid various
;; uncanny conflicts, like not reloding modules even when they are changed"
(defun my-restart-python-console ()
  (interactive)
  (if (get-buffer (format "Python %s" (buffer-file-name))  )
      (let ((kill-buffer-query-functions nil)) (kill-buffer (format "Python %s" (buffer-file-name)))))
  (elpy-shell-send-region-or-buffer))
#+end_src

* Key bindings
** Global bindings (disabled)
#+begin_src elisp :tangle no
;; NOTE: I am not sure if I am even using these, so no tangle
(global-set-key (kbd "C-c C-x C-c") 'my-restart-python-console)
(global-set-key (kbd "C-S-v") #'paste-from-clipboard)
#+end_src

#+begin_src elisp
(map!
 (:leader :desc "insert node immediate" "n r k" #'cf/org-roam-node-insert-immediate)
 (:leader :desc "node complete" "n r c" #'completion-at-point)
 (:leader :desc "devdocs" "d")
 (:leader :desc "Open on point" "d o" #'devdocs-browser-open)
 (:leader :desc "Open on point for doc" "d i" #'devdocs-browser-open-in)
 (:leader :desc "Show available snippets" "m y" #'yas-describe-tables))
; TODO Need binding for treemacs workspace edit
#+end_src

** Package specific
This uses =with-eval-after-load=. It executes body after file/feature is loaded. See [[https://company-mode.github.io/manual/Getting-Started.html][Getting Started (Company User Manual)]]
*** Misc packages
#+begin_src elisp
(with-eval-after-load 'company
  (define-key company-mode-map (kbd "C-/") 'company-complete)
  )
#+end_src
*** org-mode specific packages
#+begin_src elisp
(use-package! org
  :mode ("\\.org\\'" . org-mode)
  :config
  (define-key org-mode-map (kbd "C-c C-r") verb-command-map))
  (setq verb-auto-kill-response-buffers t)

(use-package! org-web-tools
  :after org
  :demand t ; do not lazy load this
  :config
  (define-key evil-normal-state-map (kbd "SPC i l") #'org-web-tools-insert-link-on-point))
#+end_src

* Custom functions (cf)
NOTE: I am very inconsistent with the =cf= prefix. That needs some fixing someday.
** Export ox-hugo site
- Source: [[https://github.com/kaushalmodi/ox-hugo/discussions/585#discussioncomment-2335203][How to export all Org files in a directory + How to generate offline navigable HTML files using Hugo?]]
- Maybe allow optional single files to be exported
- Export Takes about 2m for ~200 files.
- This export exports everything and not only the changed files. Which is what we want sometimes if we commited things without exporting.
#+begin_src elisp
(defun cf/hugo-export-all (&optional org-files-root-dir dont-recurse)
  "Export all Org files (including nested) under ORG-FILES-ROOT-DIR.
Example usage in Emacs Lisp: (ox-hugo/export-all \"~/org\")."
  (interactive)
  (let* ((org-files-root-dir (or org-files-root-dir default-directory))
         (dont-recurse (or dont-recurse (and current-prefix-arg t)))
         (search-path (file-name-as-directory (expand-file-name org-files-root-dir)))
         (org-files (if dont-recurse
                        (directory-files search-path :full "\.org$")
                      (directory-files-recursively search-path "\.org$")))
         (num-files (length org-files))
         (cnt 1))
    (if (= 0 num-files)
        (message (format "No Org files found in %s" search-path))
      (progn
        (message (format (if dont-recurse
                             "[ox-hugo/export-all] Exporting %d files from %S .."
                           "[ox-hugo/export-all] Exporting %d files recursively from %S ..")
                         num-files search-path))
        (dolist (org-file org-files)
          (with-current-buffer (find-file-noselect org-file)
            (message (format "[ox-hugo/export-all file %d/%d] Exporting %s" cnt num-files org-file))
            (org-hugo-export-wim-to-md :all-subtrees)
            (setq cnt (1+ cnt))))
        (message "Done!")))))
#+end_src
** Export static stuff
#+begin_src elisp
(defun cf/export-static-html (file_path)
  (with-current-buffer (find-file-noselect file_path)
    (org-html-export-to-html)
    )
  (message "Done!"))
#+end_src
** Journal location
Source: =jparcill/emacs_config/blob/master/config.el=
#+begin_src elisp
(defun cf/org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))
#+end_src
** org-roam insert immediate
Source: [[https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/][5 Org Roam Hacks for Better Productivity in Emacs - System Crafters]]
#+begin_src elisp
(defun cf/org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t :unnarrowed t)))))
    (apply #'org-roam-node-insert args)))
#+end_src
** org-journal date prefix
#+begin_src elisp
(defun cf/org-journal-date-prefix (time)
  (let* (
         (date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
         (year (format-time-string "%Y"))
         (month (format-time-string "%m"))
         )
    (mapconcat #'identity
               `("", (format "#+HUGO_SECTION: journal/%s/%s" year month),(concat "#+DATE: " date))
               "\n")))
#+end_src
** ox-hugo new subtree post capture
Source: [[https://ox-hugo.scripter.co/doc/org-capture-setup/][Org Capture Setup — ox-hugo - Org to Hugo exporter]]
#+begin_src elisp
(defun org-hugo-new-subtree-post-capture-template ()
  "Returns `org-capture' template string for new Hugo post. See `org-capture-templates' for more information."
  (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
         (date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
         (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
         (fname (org-hugo-slug title)))
    (mapconcat #'identity
               `(
                 ,(concat "* TODO " title)
                 ":PROPERTIES:"
                 ,(concat ":EXPORT_FILE_NAME: " fname)
                 ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                 ":END:"
                 "%?\n")                ;Place the cursor here finally
               "\n")))
#+end_src
** org-roam insert image
- TODO: Probably can make this function more dynamic in the directory selection then I can use it in many more places.
- Source: [[https://tony-zorman.com/posts/emacs-potpourri.html][A Potpourri of Emacs Tweaks · Tony Zorman]]
#+begin_src elisp
(defun slot/org-roam-insert-image ()
  "Select and insert an image at point."
  (interactive)
  (let* ((file-name (format "%s-%s.png"
                            (file-name-sans-extension (buffer-name))
                            (cl-random (expt 2 31))))
         (path (format "%s/%s/%s" org-roam-directory "images" file-name)))
    (let ((grim-exit (call-process "/usr/bin/fish" nil t nil "-c" (format "grim -g \"$(slurp)\" - | swappy -f - -o %s" path))))
      (when (= grim-exit 0)
        ;; ox-hugo needs the file prefix to properly set the path for the image when exported
        (insert (format "[[file:./images/%s]]" file-name)))
      )))
#+end_src
** org-web-tools link title fetch
- See [[https://github.com/alphapapa/org-web-tools/issues/38#issuecomment-1412616933][Feature: replace existing URLs in Org document · Issue #38 · alphapapa/org-web-tools · GitHub]]
- TODO: Update =replace-string= with appropriate methods
#+begin_src elisp
(defun org-web-tools-insert-link-on-point ()
  (interactive)
  (replace-string (thing-at-point 'url t) (org-web-tools--org-link-for-url (thing-at-point 'url t))))
#+end_src

* Other notes
** Tangle
- When you tangle things, if you change property ~#+PROPERTY: header-args :tangle <filename.ext>~, You need to =C-C C-c= on that line. Otherwise =C-c C-v t= will keep tangling to the old file. Pretty annoying, yeah.
